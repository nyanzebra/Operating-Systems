Design Document
===============

This project involves delving into the kernel with goal of implementing user applications. A variety of System calls will be implemented; some process related and others being file related. Some data structures will either need to be found or constructed in order to implement a well functioning operation. The remainder of this document will discuss implementation details in the form of possible data structures (being used and created), and scenarios that must be addressed for a function.

Data Structures
===============

The system calls in question are related to files and processes, therefore at minimum a representation of process and file are required. These representations are given in the form of pid (process identifier) and fid (file identifier). 

Files need to be stored if multiple openings are allowed, this can be done with a map of fid to node(file). This approach is consistent with cs161 and allows for use vfspath as a basis for implementing file system calls. 

Processes need to be stored in a queue (already handled with global queue) for scheduling. Processes have a pid which can contain additional information on a process such as "siblings" or "children". Processes must have threads of execution as well. proc.h will be a good base for implementing the process methods with existing data structures.

Scheduler
=========

In terms of scheduling the Round-Robin scheduling model is relatively poor for the small single processes that the OS implements currently. For instance the use of systemcalls (the extent or range of application the OS can handle) will be in terms of processes just the thread for the kernel and the threads for exec and fork (creating threads/processes of same size). This hints at using either a Priority model or First come model. Priority has the issue of starvation but with some additions this can be avoided. By making priority be a function of time waiting, size, and kernel/not we can ensure that each process does not starve. The other possibility is the First come in that despite the fact it is not efficiently turning around processes it will do well in this small scale. This is because each process is either kernel or userprogram, this leads to [kern][user][kern] which will ensure no starvation and will ensure execution of programs immediately (low wait time).

Objectives / Exceptions
=======================

File
----

+ open 
	- file must exist
	- must use valid flag
	- must use valid mode/state
	- must create an identifier at least
	- should probably create / add to a map
+ read
	- file must be open (could mean 'must be in map')
	- cannot read more than in file (cannot read past end)
	- must not change file
+ write
	- file must be open
	- must change file
+ lseek
	- file must be open
	- file must return '\0' if past size of file
	- must move to offset (where a char is in a file...)
	- must support seek_set, seek_cur, seek_end
	- inputs must be valid
+ close
	- file must be open
	- file must ACTUALLY be closed
+ dup2
	- should probably close old file
	- new file must be copy of old
	- update map?
	- they must be references of one another! change in one changes other automatically!

Process
-------

+ getpid
	- must return identifier of current process (will be >= 0)
+ fork
	- must be copy of current process
	- must return 0 for a child and new pid for parent
	- must send error if not enough resources
	- copying pid should solve all other copy issues! (get corresponding process data)
	- need to have same address space?
+ execv
	- similar to fork
	- must have new address space of same size?
	- must create a 'new' process in that it performs new task (elf, stack, all new stuff)
+ waitpid
	- must support sign
	- must support options of WNOHANG, WUNTRACED, WCONTINUED, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED
	- must wait until child process (pid) has changed state
+ _exit
	- must close everything process holds
	- must terminate process
	- must return status to parent
